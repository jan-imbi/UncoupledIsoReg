// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Wp
double Wp(const arma::colvec& mu_vals, const arma::colvec& mu_probs, const arma::colvec& nu_vals, const arma::colvec& nu_probs, const double& p);
RcppExport SEXP _UncoupledIsoReg_Wp(SEXP mu_valsSEXP, SEXP mu_probsSEXP, SEXP nu_valsSEXP, SEXP nu_probsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu_vals(mu_valsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu_probs(mu_probsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type nu_vals(nu_valsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type nu_probs(nu_probsSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Wp(mu_vals, mu_probs, nu_vals, nu_probs, p));
    return rcpp_result_gen;
END_RCPP
}
// rbernoulli_custom
NumericVector rbernoulli_custom(const int& n, const double& a, const double& b, const double& p);
RcppExport SEXP _UncoupledIsoReg_rbernoulli_custom(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rbernoulli_custom(n, a, b, p));
    return rcpp_result_gen;
END_RCPP
}
// pbernoulli_custom
std::vector<double> pbernoulli_custom(const arma::colvec& x, const double& a, const double& b, const double& p);
RcppExport SEXP _UncoupledIsoReg_pbernoulli_custom(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pbernoulli_custom(x, a, b, p));
    return rcpp_result_gen;
END_RCPP
}
// minimize_entropic_W
Rcpp::List minimize_entropic_W(const arma::colvec& Y, Rcpp::Nullable<arma::colvec> A, Rcpp::Nullable<arma::colvec> AV, Rcpp::Nullable<arma::mat> P_D, Rcpp::Nullable<arma::colvec> muStart, const arma::uword& maxIter, const arma::uword& minIter, const arma::uword& sinkhornIter, const double& eps, const double& gammaStart, const double& p, const double& sinkhornTol, const double& gradDescTol, const bool& fastSinkhorn, const bool& pushforwardStart, const bool& suppressOutput, const double& WThreshold);
RcppExport SEXP _UncoupledIsoReg_minimize_entropic_W(SEXP YSEXP, SEXP ASEXP, SEXP AVSEXP, SEXP P_DSEXP, SEXP muStartSEXP, SEXP maxIterSEXP, SEXP minIterSEXP, SEXP sinkhornIterSEXP, SEXP epsSEXP, SEXP gammaStartSEXP, SEXP pSEXP, SEXP sinkhornTolSEXP, SEXP gradDescTolSEXP, SEXP fastSinkhornSEXP, SEXP pushforwardStartSEXP, SEXP suppressOutputSEXP, SEXP WThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::colvec> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::colvec> >::type AV(AVSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type P_D(P_DSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::colvec> >::type muStart(muStartSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type minIter(minIterSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type sinkhornIter(sinkhornIterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const double& >::type gammaStart(gammaStartSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type sinkhornTol(sinkhornTolSEXP);
    Rcpp::traits::input_parameter< const double& >::type gradDescTol(gradDescTolSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fastSinkhorn(fastSinkhornSEXP);
    Rcpp::traits::input_parameter< const bool& >::type pushforwardStart(pushforwardStartSEXP);
    Rcpp::traits::input_parameter< const bool& >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< const double& >::type WThreshold(WThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(minimize_entropic_W(Y, A, AV, P_D, muStart, maxIter, minIter, sinkhornIter, eps, gammaStart, p, sinkhornTol, gradDescTol, fastSinkhorn, pushforwardStart, suppressOutput, WThreshold));
    return rcpp_result_gen;
END_RCPP
}
// laurentCondat
arma::colvec laurentCondat(const arma::colvec& y);
RcppExport SEXP _UncoupledIsoReg_laurentCondat(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(laurentCondat(y));
    return rcpp_result_gen;
END_RCPP
}
// logStabSinkhorn_cpp
arma::field<arma::colvec> logStabSinkhorn_cpp(const arma::colvec& a_, const arma::colvec& b, const arma::mat& costMat_, const double& eps, const arma::uword& maxIter, const double& tol);
RcppExport SEXP _UncoupledIsoReg_logStabSinkhorn_cpp(SEXP a_SEXP, SEXP bSEXP, SEXP costMat_SEXP, SEXP epsSEXP, SEXP maxIterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type a_(a_SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type costMat_(costMat_SEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logStabSinkhorn_cpp(a_, b, costMat_, eps, maxIter, tol));
    return rcpp_result_gen;
END_RCPP
}
// Subgradient
arma::field<arma::colvec> Subgradient(const arma::colvec& a_, const arma::colvec& b, const arma::mat& M, const double& eps, const arma::uword& maxIter, const double& tolerance);
RcppExport SEXP _UncoupledIsoReg_Subgradient(SEXP a_SEXP, SEXP bSEXP, SEXP MSEXP, SEXP epsSEXP, SEXP maxIterSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type a_(a_SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(Subgradient(a_, b, M, eps, maxIter, tolerance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_UncoupledIsoReg_Wp", (DL_FUNC) &_UncoupledIsoReg_Wp, 5},
    {"_UncoupledIsoReg_rbernoulli_custom", (DL_FUNC) &_UncoupledIsoReg_rbernoulli_custom, 4},
    {"_UncoupledIsoReg_pbernoulli_custom", (DL_FUNC) &_UncoupledIsoReg_pbernoulli_custom, 4},
    {"_UncoupledIsoReg_minimize_entropic_W", (DL_FUNC) &_UncoupledIsoReg_minimize_entropic_W, 17},
    {"_UncoupledIsoReg_laurentCondat", (DL_FUNC) &_UncoupledIsoReg_laurentCondat, 1},
    {"_UncoupledIsoReg_logStabSinkhorn_cpp", (DL_FUNC) &_UncoupledIsoReg_logStabSinkhorn_cpp, 6},
    {"_UncoupledIsoReg_Subgradient", (DL_FUNC) &_UncoupledIsoReg_Subgradient, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_UncoupledIsoReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
